<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <title>MineSweeper</title>
        <style>
            table {
              border: 2px solid darkgrey;
              margin: auto;
          
            }
            
            td {
              display: inline-block;
              border:solid gray;
              margin-top: 0px;
              margin-bottom: 0px;
              margin-left: 0px;
              margin-right: 0px;
              padding: 10px;
              background-color:lightgray;
              width: 12px;
              height: 12px;
              font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
             }

            p {
                font-size: 40px;
                text-align: center;
            }

           
        </style>
    </head>
    <body>
        <button>PLAY</button>

        <script>
        
        
        const btn = document.querySelector('button');

    function myGame() {
        const p = document.createElement('p');
        document.body.appendChild(p);
        
        const para = document.querySelector('p');
     
    /*----------------------------random------------------------------------------------*/     
        function random(max, min) {
          return Math.floor(Math.random() * (max - min +1) + min);  
        } 
    /*----------------------creating table dynamically----------------------------------*/
        function createTable() {
          
          const myTable = document.createElement('table');
          myTable.setAttribute('id', `myTable`);
        
          for(let i = 0; i<=9; i++){
            const row = document.createElement('tr');
         
            for(let j = 0; j<=9; j++){
              const cell = document.createElement('td');
              cell.setAttribute('id', `[${i}][${j}]`);
              row.appendChild(cell);
            }
              
            myTable.appendChild(row);
            }
            document.body.appendChild(myTable);
        } 
    /*-------------------------calling function--------------------------------------------*/
        createTable();  

    /*--------------------------global scope arguments and object of cells--------------------*/
      
    
        const cellsList = document.querySelectorAll('td');
        let mycells = {}; 
        
        for(let i = 0; i<cellsList.length; i++){
          Object.defineProperty(mycells,`${i}`,{
            value: {},
            writable: true,
            enumerable:true,
          }); 
          
          Object.defineProperty(mycells[i], 'visible',{
         
              value: false,
              writable:true,
              enumerable:true,
          });

          Object.defineProperty(mycells[i], 'flag',{
            value: false,
            writable:true,
            enumerable:true,
           });
        }

        console.log(mycells);

    /*-----------------------------making bombs------------------------------------------*/    
        let arrOfBombs = [];
        
        function bombGenerator(number) {
          let myRandom ;  
          let i = 0;

          while(i<number){ 
            myRandom = random(0,99);    
            if(arrOfBombs.indexOf(myRandom) == -1){
              arrOfBombs.push(myRandom);
             Object.defineProperty(mycells[myRandom], 'bomb', {
                value: true,
                writable: true,
                enumerable: true, 
               }); 
               
               i++;
          }    
          }
          
        //  console.log(`arrOfBombs`, arrOfBombs);
       
        }
    /*--------------------------------------------------------------------------------*/
       
        bombGenerator(12);

    /*----------------------number generator-------------------------------------*/  
 
      let myNum = {};
   
      
      function numGenerator(arrayOfBombs) {
        let counter = 0;  
        for(let i = 0; i<cellsList.length; i++){
           if(arrOfBombs.indexOf(i) == -1 ){

            if(arrOfBombs.indexOf(i-11) != -1 && (i % 10 != 0)){
            counter ++;
          }
          if(arrOfBombs.indexOf(i-10) != -1){
            counter ++;
          }
          if(arrOfBombs.indexOf(i-9) != -1 && (i % 10 != 9)){
            counter ++;
          }
          if(arrOfBombs.indexOf(i-1) != -1 && (i % 10 != 0)){
            counter ++;
          }
          if(arrOfBombs.indexOf(i+1) != -1 && (i % 10 != 9)){
            counter ++;
          
          }
          if(arrOfBombs.indexOf(i+9) != -1 && (i % 10 != 0)){
            counter ++;
          
          }
           if(arrOfBombs.indexOf(i+10) != -1){
            counter ++;
           
          }
         if(arrOfBombs.indexOf(i+11) != -1 && (i % 10 != 9)){
            counter ++;
          }
         
          Object.defineProperty(mycells[i] , 'num', { 
           
              value:counter,
              writable: true,
              enumerable: true, 
            
         
          }); 

          Object.defineProperty(myNum, `${i}`, {
                value: counter,
                writable: true,
                enumerable: true, 
               }); 
          
      
         } 
         counter = 0 ;
        
      }
      }
       
    
      numGenerator(arrOfBombs);
   //   console.log(myNum);
      
     /*-------------------------------recursive for mts-------------------------------------*/
     
       var result = [];
       function empty(c){
         if (c<0 || c>99){
           return;
          }
          if (result.indexOf(c) != -1){
            return;
          }
          if (myNum[c]>0) {
            result.push(c);
            return;
           }

          result.push(c);
          empty(c+10);
          empty(c-10);
          if ((c%10 < 9)) {empty(c+1);}
          if ((c%10 > 0)) {empty(c-1);}
          if ((c%10 < 9)) {empty(c+11);}
          if ((c%10 > 0)) {empty(c-11);}
          if ((c%10 > 0)) {empty(c+9);}
          if ((c%10 < 9)) {empty(c-9);}
        }

        
    /*-------------------------function EventListener for bombs------------------------------*/
        function bombClick(e){
          for(let i = 0; i<cellsList.length; i++){
            if(arrOfBombs.indexOf(i) != -1){
              if((e.target == cellsList[i]) && (mycells[i]['visible'] == false)){
                for(let j = 0; j<arrOfBombs.length; j++){ 
                  cellsList[arrOfBombs[j]].style.backgroundImage = 'url(bomb.png)';
                  mycells[arrOfBombs[j]]['visible'] = true;
                  para.textContent = `GAME OVER`;
                 
                }
               } 
            }
           }
                 
        };
    /*-----------------------------refrence to table cells------------------------------*/

       const mytbl = document.querySelector('table');

    /*------------------------EventListener of bombs-----------------------------------------*/
       
        mytbl.addEventListener('click', bombClick,true);

    /*---------------------------------------------------------------------------------------*/
        mytbl.addEventListener('click', function(e){
         
          for(let i = 0; i < cellsList.length; i++){
            
            if((e.target == cellsList[i]) && (mycells[i]['visible'] == false)){ 
              if (myNum[i]>0) {
                cellsList[i].textContent = myNum[i];
                mycells[i]['visible'] = true;
              }  
              if(myNum[i] == 0 ) { 
                empty(i);}
              }
            }
          for (let j = 0; j<result.length; j++){
              if ((myNum[result[j]] == 0) && (mycells[result[j]]['visible'] == false)){ 
                cellsList[result[j]].style.backgroundColor = 'darkgray';
                mycells[result[j]]['visible'] = true;
              }
              if ((myNum[result[j]]>0) && (mycells[result[j]]['visible'] == false)) {
                cellsList[result[j]].textContent = myNum[result[j]];
                mycells[result[j]]['visible']= true;
              }
            }
          
           result = [];

        },true); 

     /*----------------------------right click for flags----------------------------------*/   
        mytbl.onauxclick = function(e){
          e.preventDefault();
          let repeat = 0;
          for(let i = 0; i< cellsList.length; i++){
            if(e.target == cellsList[i] && (mycells[i]['visible'] == false && mycells[i]['flag']== false)){  
              cellsList[i].style.backgroundImage = 'url(images.png)';
              mycells[i]['visible'] = true;
              mycells[i]['flag'] = true;
              repeat = 1;
            }
            if(mycells[i]['flag']==true && (repeat == 0)){
                cellsList[i].style.backgroundImage = '';
                mycells[i]['flag'] = false;
                mycells[i]['visible'] = false;
                 
            }
           
          }
          repeat = 0;  
        }

        mytbl.oncontextmenu = function(e){
          e.preventDefault();  
        }
       


 
   /*----------------------remove EventListener for resting the game------------------------*/ 
   function removeE() { 
          
        mytbl.removeEventListener('click', bombClick,true);
          
        mytbl.removeEventListener('click', function(e){
         
         for(let i = 0; i < cellsList.length; i++){
           
           if((e.target == cellsList[i]) && (mycells[i]['visible'] == false)){ 
             if (myNum[i]>0) {
               cellsList[i].textContent = myNum[i];
               mycells[i]['visible'] = true;
             }  
             if(myNum[i] == 0 ) { 
               empty(i);}
             }
           }
         for (let j = 0; j<result.length; j++){
             if ((myNum[result[j]] == 0) && (mycells[result[j]]['visible'] == false)){ 
               cellsList[result[j]].style.backgroundColor = 'darkgray';
               mycells[result[j]]['visible'] = true;
             }
             if ((myNum[result[j]]>0) && (mycells[result[j]]['visible'] == false)) {
               cellsList[result[j]].textContent = myNum[result[j]];
               mycells[result[j]]['visible']= true;
             }
           }
         
          result = [];

       },true); 
    }

    /*------------------------rest all global varibales------------------------------------*/
     // we need it for reseting the game 
    function resetGlobalVar() {
          result = [];
          arrOfBombs = [];
          myNum = {};
          mycells = {} ;
          p.remove();
          mytbl.remove();
       } 
    
   /*-------------------------reset game ----------------------------------------------*/
 
       
       function resetGame(){
          // document.location.href = '';  dummy way to reset game 
        
          removeE();
          resetGlobalVar();
          myGame();
        }
    /*--------------------------------------------------------------------------------*/ 
       
        btn.onclick = resetGame;
       
    }  
    /*-----------------------------------------------------------------------------*/
    
    
     myGame();
      
        </script>
    </body>

</html>
